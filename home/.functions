#!/usr/bin/env bash

# Git diff from HEAD to commit hash,
# send to file on desktop, open in text editor
function gitdiff() {
  local timestamp;
  timestamp=$(date +%Y%m%d%H%M%S);
  git diff --name-status HEAD "$1" > ~/Desktop/diff"$timestamp".txt && open ~/Desktop/diff"$timestamp".txt;
}

# `v` with no arguments opens the current directory in Void, otherwise
# opens the given location
function v() {
  if [ $# -eq 0 ]; then
    void .;
  else
    void "$@';";
  fi;
}


# `t` with no arguments opens the current directory in Git Tower, otherwise
# opens the given location
function t() {
  if [ $# -eq 0 ]; then
    gittower .;
  else
    gittower "$@";
  fi;
}

# `v` with no arguments opens the current directory in VSCode, otherwise
# opens the given location
function vs() {
  if [ $# -eq 0 ]; then
    code .;
  else
    code "$@";
  fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# List merged remote branches
function check-merged() {
  git branch &&
  git pull &&
  for branch in $(git branch -r --merged | grep -v HEAD); do echo -e "$(git show --format="%ci %cr %an" "$branch" | head -n 1)" "\\t$branch"; done | sort -r
  echo -e "\nto remove:\\ngit push origin --delete branch-name";
}

# List merged remote branches - list for editing
function check-merged-list() {
  git branch &&
  git pull &&
  for branch in $(git branch -r --merged | grep -v HEAD); do echo -e "$(git show --format="%ci %n" "$branch" | head -n 1)" "\\t$branch"; done | sort -r
  echo -e "\nto remove:\\ngit push origin --delete branch-name";
}

# List unmerged remote branches
function check-unmerged() {
  git branch &&
  git pull &&
  for branch in $(git branch -r --no-merged | grep -v HEAD); do echo -e "$(git show --format="%ci %cr %an" "$branch" | head -n 1)" "\\t$branch"; done | sort -r
  echo -e "\nto remove:\\ngit push origin --delete branch-name";
}

# List merged remote branches - list for editing
function check-unmerged-list() {
  git branch &&
  git pull &&
  for branch in $(git branch -r --merged | grep -v HEAD); do echo -e "$(git show --format="%ci %n" "$branch" | head -n 1)" "\\t$branch"; done | sort -r
  echo -e "\nto remove:\\ngit push origin --delete branch-name";
}

# Show most used commands
# via: https://remysharp.com/2019/10/08/listing-your-most-used-commands
function command-history() {
  history |
  awk 'BEGIN {FS="\\|"; OFS="\n"} { $1=$1; gsub(/^[0-9* ]+/, ""); print $0 }' |
  awk '{ $1=$1 } /^[a-z]/ { print $1 }' |
  sort |
  uniq -c |
  sort -n
}

# Make a PDF look scanned
# via: https://twitter.com/viljamis/status/1528688204962045952
function scanpdf() {
  if [ $# -eq 0 ]; then
    echo "pick one:"
    find . -name "*.pdf" | while read -r installer ; do echo "${installer}" ; done
  else
    convert -density 300 "$@" \
-alpha remove -rotate 0.3 -attenuate 0.15 +noise Multiplicative +repage -monochrome \
-compress group4 "scanned-$*"
  fi;
}

# Update Docker desktop for macOS
# Includes Docksal stop and start
function update-docker() {
  fin system stop
  brew reinstall --cask docker
  open -a docker
  fin update
  fin system reset
}

# https://www.stefanjudis.com/snippets/a-native-shell-alternative-to-the-trash-cli/
function trash() {
  echo -e "üóëÔ∏è  Moving files to trash...";
  for var in "$@"
  do
    mv "$var" "$HOME/.trash";
  done
}

function webm2gif() {
  ffmpeg -y -i "$1" -vf palettegen _tmp_palette.png
  ffmpeg -y -i "$1" -i _tmp_palette.png -filter_complex paletteuse -r 10  "${1%.webm}.gif"
  rm _tmp_palette.png
}
